import os
import django
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "project.settings")
django.setup()

from app.models import User, Category, Task


def check_password_hashing():
    user = User.objects.get(username="testuser")

    print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:")
    print(f"–ü–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ: {user.password}")  # –•–µ—à
    print(f"–î–ª–∏–Ω–∞ —Ö–µ—à–∞: {len(user.password)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 'testpass123': {user.check_password('testpass123')}")
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {user.check_password('wrongpass')}")


def create_test_data():
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = User.objects.get_or_create(
        username="testuser",
        defaults={"email": "test@example.com", "time_zone": "Europe/Moscow"},
    )
    if created:
        user.set_password("testpass123")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        user.save()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    else:
        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # 2. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_data = [
        {"name": "–†–∞–±–æ—Ç–∞", "color": "#FF6B6B"},
        {"name": "–õ–∏—á–Ω–æ–µ", "color": "#4ECDC4"},
        {"name": "–£—á–µ–±–∞", "color": "#45B7D1"},
        {"name": "–ó–¥–æ—Ä–æ–≤—å–µ", "color": "#96CEB4"},
    ]

    categories = []
    for cat_data in categories_data:
        category, created = Category.objects.get_or_create(
            name=cat_data["name"], user=user, defaults={"color": cat_data["color"]}
        )
        categories.append(category)
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")

    # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks_data = [
        {
            "title": "–ò–∑—É—á–∏—Ç—å Django ORM",
            "description": "–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –º–æ–¥–µ–ª—è–º–∏, –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏",
            "status": "in_progress",
            "categories": [categories[2]],  # –£—á–µ–±–∞
        },
        {
            "title": "–°–¥–µ–ª–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É 1",
            "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –õ–†1 –ø–æ —Å–µ—Ç–µ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º",
            "status": "todo",
            "categories": [categories[2]],  # –£—á–µ–±–∞
        },
        {
            "title": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É",
            "description": "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏",
            "status": "todo",
            "categories": [categories[3]],  # –ó–¥–æ—Ä–æ–≤—å–µ
        },
        {
            "title": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
            "description": "–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
            "status": "done",
            "categories": [categories[0], categories[2]],  # –†–∞–±–æ—Ç–∞ + –£—á–µ–±–∞
        },
    ]

    for i, task_data in enumerate(tasks_data):
        task, created = Task.objects.get_or_create(
            title=task_data["title"],
            user=user,
            defaults={
                "description": task_data["description"],
                "status": task_data["status"],
                "due_date": datetime.datetime.now() + datetime.timedelta(days=i + 1),
            },
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ
        for category in task_data["categories"]:
            task.categories.add(category)

        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task.title}")

    print("üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}")
    print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {Category.objects.count()}")
    print(f"üìù –ó–∞–¥–∞—á: {Task.objects.count()}")


if __name__ == "__main__":
    # create_test_data()
    check_password_hashing()
